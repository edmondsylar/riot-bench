[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]
include = ["pyriotbench*"]

[project]
name = "pyriotbench"
version = "0.1.0"
description = "Python port of RIoTBench - IoT streaming benchmark suite"
authors = [
    {name = "PyRIoTBench Team", email = "pyriotbench@example.com"},
]
readme = "README.md"
requires-python = ">=3.10"
license = {text = "Apache-2.0"}
keywords = ["benchmark", "iot", "streaming", "flink", "beam", "performance"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Benchmark",
]

dependencies = [
    "pyyaml>=6.0",
    "pydantic>=2.0",
    "attrs>=23.0",
    "click>=8.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4",
    "pytest-cov>=4.1",
    "black>=23.7",
    "ruff>=0.0.285",
    "mypy>=1.5",
    "types-PyYAML",
]
beam = [
    "apache-beam[gcp]>=2.50",
]
flink = [
    "apache-flink>=1.17",
]
ml = [
    "scikit-learn>=1.3",
    "numpy>=1.24",
    "scipy>=1.11",
    "joblib>=1.3",
]
azure = [
    "azure-storage-blob>=12.17",
    "azure-data-tables>=12.4",
]
mqtt = [
    "paho-mqtt>=1.6",
]
viz = [
    "matplotlib>=3.7",
    "plotly>=5.14",
]
all = [
    "pyriotbench[dev,beam,flink,ml,azure,mqtt,viz]",
]

[project.scripts]
pyriotbench = "pyriotbench.cli.main:cli"

[project.urls]
Homepage = "https://github.com/edmondsylar/riot-bench"
Documentation = "https://github.com/edmondsylar/riot-bench/tree/master/pyDocs"
Repository = "https://github.com/edmondsylar/riot-bench"
"Original RIoTBench" = "https://github.com/anshuiisc/riot-bench"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_functions = "test_*"
python_classes = "Test*"
addopts = "-v --cov=pyriotbench --cov-report=html --cov-report=term --cov-report=xml"
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow running tests",
]

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 100
target-version = "py310"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
]
ignore = [
    "E501",  # line too long (handled by black)
]

[tool.mypy]
python_version = "3.10"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = false

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.coverage.run]
source = ["pyriotbench"]
omit = ["tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]
